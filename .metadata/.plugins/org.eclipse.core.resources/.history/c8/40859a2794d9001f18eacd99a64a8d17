package DataDrivenTesting;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelUtilities {
	public static File file;
	public static FileInputStream fis;
	public static FileOutputStream fos;
	public static XSSFWorkbook workbook;
	public static XSSFSheet sheet;
	public static XSSFRow rows;
	public static XSSFCell cells;
	public static XSSFCellStyle cellstyle;

	public static int getRowCount(String f, String sheetname) throws IOException {
		file = new File(f);
		fis = new FileInputStream(file);
		workbook = new XSSFWorkbook(fis);
		sheet = workbook.getSheet(sheetname);
		int rowcount = sheet.getLastRowNum();
		workbook.close();
		fis.close();
		return rowcount;

	}
	
	public static int getcellcount(String f, String sheetname,int rownum) throws IOException {
		file = new File(f);
		fis = new FileInputStream(file);
		workbook = new XSSFWorkbook(fis);
		sheet = workbook.getSheet(sheetname);
		int rowcount = sheet.getLastRowNum();
		rows=sheet.getRow(rownum);
		int cellcount=sheet.getRow(rownum).getLastCellNum();
		workbook.close();
		fis.close();
		return cellcount;

	}
	
	public static String getCellData(String f, String sheetname,int rownum,int cellnum) throws IOException {
		file = new File(f);
		fis = new FileInputStream(file);
		workbook = new XSSFWorkbook(fis);
		sheet = workbook.getSheet(sheetname);
		rows=sheet.getRow(rownum);
		cells=rows.getCell(cellnum);
		String data;
		
		try {
//			data=cells.toString(); //one approach we have to follow
			DataFormatter formatter=new DataFormatter();//Return the formatted value of string as format
			data=formatter.formatCellValue(cells);
		} catch (Exception e) {
			data="";
		}
		
		workbook.close();
		fis.close();
		return data;
		
	}
	
	public static void setCellData(String f, String sheetname,int rownum,int cellnum,String data) throws IOException {
		file=new File(f);
		fis=new FileInputStream(file);
		workbook=new XSSFWorkbook(fis);
		sheet=workbook.getSheet(sheetname);
		rows=sheet.getRow(rownum);
		cells=rows.createCell(cellnum);
		cells.setCellValue(data);
		fos=new FileOutputStream(file);
		workbook.write(fos);
		workbook.close();
		fos.close();
		
	}
	
	public static void fillGreenColour(String f, String sheetname,int rownum,int cellnum,String data) throws IOException {
		file=new File(f);
		fis=new FileInputStream(file);
		workbook=new XSSFWorkbook(fis);
		sheet=workbook.getSheet(sheetname);
		rows=sheet.getRow(rownum);
		cells=rows.getCell(cellnum);
		
		cellstyle=workbook.createCellStyle();
		cellstyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());
		fos=new FileOutputStream(file);
		workbook.write(fos);
		workbook.close();
		fos.close();
	}
	
	
	
	
}
